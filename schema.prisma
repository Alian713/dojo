generator client {
    provider             = "prisma-client-py"
    recursive_type_depth = -1
    output               = "./database/prisma"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL_VALIDATOR")
}

enum CriteriaTypeEnumModel {
    RANKING_CRITERIA
    MULTI_SCORE
    SCORE
    MULTI_SELECT
}

model FeedbackRequestModel {
    id              String               @id @default(uuid())
    request_id      String               @unique
    task_type       String
    prompt          String
    ground_truth    Json
    criteria_types  CriteriaTypeModel[]
    miner_responses MinerResponseModel[]
    created_at      DateTime             @default(now())
    updated_at      DateTime             @updatedAt
}

model MinerResponseModel {
    id               String                    @id @default(uuid())
    request_id       String
    miner_hotkey     String
    dojo_task_id     String
    expire_at        String
    completions      CompletionResponseModel[]
    feedback_request FeedbackRequestModel      @relation(fields: [request_id], references: [request_id])
    created_at       DateTime                  @default(now())
    updated_at       DateTime                  @updatedAt
}

model CompletionResponseModel {
    id                String             @id @default(uuid())
    cid               String             @unique
    model             String
    completion        Json
    rank_id           Int?
    score             Float?
    miner_response_id String
    miner_response    MinerResponseModel @relation(fields: [miner_response_id], references: [id])
    created_at        DateTime           @default(now())
    updated_at        DateTime           @updatedAt
}

model CriteriaTypeModel {
    id               String                @id @default(uuid())
    type             CriteriaTypeEnumModel
    options          Json?
    min              Float?
    max              Float?
    request_id       String
    feedback_request FeedbackRequestModel  @relation(fields: [request_id], references: [request_id])
    created_at       DateTime              @default(now())
    updated_at       DateTime              @updatedAt
}

// request_id, miner_hotkey, task_id are composite key
model ValidatorStateModel {
    id               String   @id @default(uuid())
    request_id       String
    miner_hotkey     String
    task_id          String
    expire_at        String
    obfuscated_model String
    real_model       String
    created_at       DateTime @default(now())
    updated_at       DateTime @updatedAt
}

model ScoreModel {
    id         String   @id @default(uuid())
    score      Json
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
}
